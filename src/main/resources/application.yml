server:
  port: 8080
  compression: # embedded tomcat 기동 시에 사용되는 설정. tomcat server 에서 실행할 경우는 server.xml 에 설정.
    min-response-size: 1
    enabled: true

spring:
  application:
    name: sample-api
  profiles:
    active: local # default profile
  # 404 not found settings
  mvc:
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false


  # zipkin, sleuth 설정 시 jooq 를 사용하고 있을 경우에는 충돌이 발생할 수 있습니다.
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration

  # zipkin, sleuth 설정 시작.
  sleuth:
    rxjava.schedulers.hook.enabled: false
    enabled: true
    sampler:
      percentage: 1.0

  zipkin:
    enabled: false
  # zipkin, sleuth 설정 끝.


# logging config
logging:
  config: classpath:logback-spring.xml
  file: ${spring.application.name}  # logback-spring.xml 에서 .log 붙여준다.


# actuator 설정
management:
  context-path: /servicemanager  # actuator root uri (수정하지 말것.)
  security:
    enabled: false  # false 이면 actuator endpoint 에 security 적용하지 않는다.

# spring security 설정
security:
  basic:
    enabled: false  # false 이면 security 하지 않는다.
    path: /, /swagger-ui.html, /v2/api-docs, /configuration/ui, /swagger-resources, /configuration/security, /webjars/**  # security 적용 시 대상 endpoint 를 설정 한다.
  user:
    name: test  # security login id
    password: test  # security login password


---
spring:
  profiles: local

  datasource:
    url: jdbc:mysql://localhost:3306/JUPITER?autoReconnect=true&useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul
    username: develop
    password: dev123!@#
    validation-query: select 1
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update # 운영시에는 validate 추천
    show-sql: true

resources:
  uri:
    ship:
      mypage-purchase: /live/getPurchaseList
    live:
      mypage-purchase: /live/getPurchaseList

---
spring:
  profiles: dev

resources:
  uri:
    ship:
      mypage-purchase: /live/getPurchaseList
    live:
      mypage-purchase: /live/getPurchaseList

---
spring:
  profiles: qa

resources:
  uri:
    ship:
      mypage-purchase: /live/getPurchaseList
    live:
      mypage-purchase: /live/getPurchaseList


# spring security 설정
management:
  security:
    enabled: true
security:
  basic:
    enabled: true

---
spring:
  profiles: stg

resources:
  uri:
    ship:
      mypage-purchase: /live/getPurchaseList
    live:
      mypage-purchase: /live/getPurchaseList


# spring security 설정
management:
  security:
    enabled: true
security:
  basic:
    enabled: true

---
spring:
  profiles: prod

resources:
  uri:
    ship:
      mypage-purchase: /live/getPurchaseList
    live:
      mypage-purchase: /live/getPurchaseList


# spring security 설정
management:
  security:
    enabled: true
security:
  basic:
    enabled: true
